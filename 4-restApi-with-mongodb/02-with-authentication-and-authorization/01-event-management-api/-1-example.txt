## **1️⃣ Installation**

```bash
# Core packages
npm install express mongoose dotenv cors cookie-parser

# Authentication / Security
npm install bcryptjs jsonwebtoken

# Dev tools
npm install --save-dev nodemon
```

**`package.json` minimal example:**

```json
{
  "name": "social-api",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "start": "node index.js",
    "dev": "nodemon index.js"
  },
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "cookie-parser": "^1.4.6",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "express": "^4.18.2",
    "jsonwebtoken": "^9.0.0",
    "mongoose": "^7.5.1"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  }
}
```

---

## **2️⃣ Folder Structure**

```
/social-api
 ┣ index.js
 ┣ .env
 ┣ models/
 ┃ ┣ User.js
 ┃ ┣ Post.js
 ┃ ┗ Comment.js
 ┣ routes/
 ┃ ┗ api.js
 ┣ middleware/
 ┃ ┣ auth.js
 ┃ ┗ role.js
```

---

## **3️⃣ Models**

### **User.js**

```js
const mongoose = require("mongoose");
const bcrypt = require("bcryptjs");

const UserSchema = new mongoose.Schema(
  {
    username: { type: String, required: true, unique: true },
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    role: { type: String, default: "user" }, // can be admin
  },
  { timestamps: true }
);

// Hash password before saving
UserSchema.pre("save", async function (next) {
  if (!this.isModified("password")) return next();
  this.password = await bcrypt.hash(this.password, 10);
  next();
});

// Compare password method
UserSchema.methods.comparePassword = async function (password) {
  return bcrypt.compare(password, this.password);
};

module.exports = mongoose.model("User", UserSchema);
```

---

### **Post.js**

```js
const mongoose = require("mongoose");

const PostSchema = new mongoose.Schema(
  {
    content: { type: String, required: true },
    createdBy: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
  },
  { timestamps: true }
);

module.exports = mongoose.model("Post", PostSchema);
```

---

### **Comment.js**

```js
const mongoose = require("mongoose");

const CommentSchema = new mongoose.Schema(
  {
    content: { type: String, required: true },
    post: { type: mongoose.Schema.Types.ObjectId, ref: "Post", required: true },
    createdBy: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
  },
  { timestamps: true }
);

module.exports = mongoose.model("Comment", CommentSchema);
```

---

## **4️⃣ Middleware**

### **auth.js (JWT in cookies)**

```js
const jwt = require("jsonwebtoken");
const User = require("../models/User");

const requireAuth = async (req, res, next) => {
  try {
    const token = req.cookies.token;
    if (!token) return res.status(401).json({ error: "Unauthorized!" });

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const user = await User.findById(decoded.userId);
    if (!user) return res.status(401).json({ error: "User not found!" });

    req.user = user;
    next();
  } catch (err) {
    res.status(401).json({ error: "Invalid token!" });
  }
};

module.exports = requireAuth;
```

---

### **role.js (Authorization)**

```js
const Post = require("../models/Post");

const isPostOwner = async (req, res, next) => {
  const post = await Post.findById(req.params.id);
  if (!post) return res.status(404).json({ error: "Post not found!" });

  if (post.createdBy.toString() !== req.user._id.toString())
    return res.status(403).json({ error: "Forbidden!" });

  next();
};

module.exports = { isPostOwner };
```

---

## **5️⃣ Routes (api.js)**

```js
const express = require("express");
const router = express.Router();
const jwt = require("jsonwebtoken");
const User = require("../models/User");
const Post = require("../models/Post");
const Comment = require("../models/Comment");
const requireAuth = require("../middleware/auth");
const { isPostOwner } = require("../middleware/role");

/* ------------------- AUTH ------------------- */
// Signup
router.post("/signup", async (req, res) => {
  const { username, email, password } = req.body;
  if (!username || !email || !password)
    return res.status(400).json({ error: "All fields required!" });

  const exists = await User.findOne({ email });
  if (exists) return res.status(400).json({ error: "Email already exists!" });

  const user = await User.create({ username, email, password });
  res.status(201).json({ message: "User created!", user });
});

// Login
router.post("/login", async (req, res) => {
  const { email, password } = req.body;
  if (!email || !password) return res.status(400).json({ error: "All fields required!" });

  const user = await User.findOne({ email });
  if (!user) return res.status(400).json({ error: "Invalid credentials!" });

  const isMatch = await user.comparePassword(password);
  if (!isMatch) return res.status(400).json({ error: "Invalid credentials!" });

  const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: "1d" });
  res
    .cookie("token", token, { httpOnly: true, secure: process.env.NODE_ENV === "production" })
    .status(200)
    .json({ message: "Login successful!" });
});

// Logout
router.post("/logout", (req, res) => {
  res.clearCookie("token").json({ message: "Logged out!" });
});

/* ------------------- POSTS ------------------- */
// Create post
router.post("/posts", requireAuth, async (req, res) => {
  const { content } = req.body;
  if (!content) return res.status(400).json({ error: "Content required!" });

  const post = await Post.create({ content, createdBy: req.user._id });
  res.status(201).json(post);
});

// Get all posts
router.get("/posts", async (req, res) => {
  const posts = await Post.find().populate("createdBy", "username email");
  res.json(posts);
});

// Update post
router.put("/posts/:id", requireAuth, isPostOwner, async (req, res) => {
  const { content } = req.body;
  const post = await Post.findByIdAndUpdate(req.params.id, { content }, { new: true });
  res.json(post);
});

// Delete post
router.delete("/posts/:id", requireAuth, isPostOwner, async (req, res) => {
  await Post.findByIdAndDelete(req.params.id);
  res.json({ message: "Post deleted!" });
});

/* ------------------- COMMENTS ------------------- */
// Add comment
router.post("/posts/:id/comments", requireAuth, async (req, res) => {
  const { content } = req.body;
  if (!content) return res.status(400).json({ error: "Content required!" });

  const comment = await Comment.create({
    content,
    post: req.params.id,
    createdBy: req.user._id,
  });
  res.status(201).json(comment);
});

// Get comments for a post
router.get("/posts/:id/comments", async (req, res) => {
  const comments = await Comment.find({ post: req.params.id }).populate("createdBy", "username");
  res.json(comments);
});

module.exports = router;
```

---

## **6️⃣ Server Setup (index.js)**

```js
require("dotenv").config();
const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
const cookieParser = require("cookie-parser");
const apiRoutes = require("./routes/api");

const app = express();

// Middleware
app.use(express.json());
app.use(cookieParser());
app.use(cors({ origin: "http://localhost:3000", credentials: true }));

// Routes
app.use("/api", apiRoutes);

// MongoDB Connection
mongoose
  .connect(process.env.MONGO_URI)
  .then(() => console.log("MongoDB connected"))
  .catch((err) => console.error(err));

app.listen(5000, () => console.log("Server running on port 5000"));
```

---

### **7️⃣ Environment Variables (.env)**

```
MONGO_URI=your_mongodb_atlas_uri
JWT_SECRET=your_secret_key
NODE_ENV=development
```

---

### ✅ Features Covered

* **JWT authentication** with **httpOnly cookies**
* **Protected routes** (`requireAuth`)
* **Authorization** (post ownership)
* **Users, posts, comments**
* **Input validation** basic
* **Full CRUD** for posts and comments
